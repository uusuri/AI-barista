import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from core.infrastructure.database.database_manager import DatabaseManager
from core.infrastructure.database.repositories.stock_repository import StockRepository

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤.\n"
        "–ù–∞–ø–∏—à–∏ /stock —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á–µ–≥–æ –º–∞–ª–æ –Ω–∞ —Å–∫–ª–∞–¥–µ"
    )


async def stock_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        db = DatabaseManager()
        stock_repo = StockRepository(db.get_connection())

        low_stock = stock_repo.get_low_stock_items()

        if not low_stock:
            await update.message.reply_text("‚úÖ –í—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ –Ω–æ—Ä–º–µ!")
        else:
            message = "–û—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ:\n"
            for name, quantity in low_stock:
                message += f"‚Ä¢ {name}: {quantity}\n"
            await update.message.reply_text(message)

    except Exception as e:
        await update.message.reply_text("üò¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∫–ª–∞–¥–∞")


def run_bot():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stock", stock_command))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    run_bot()
import telebot
import threading
import time
import logging
from queue import Queue, Empty

bot = telebot.TeleBot('8370067382:AAHJdPF_E3wBgIY2B-SgY4GHwfx64gMgabM')

subscribers_lock = threading.RLock()
subscribers = set()
notification_queue = Queue()
active = threading.Event()
active.set()

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('cafe_bot.log')
    ]
)
logger = logging.getLogger('CafeBot')


@bot.message_handler(commands=['start'])
def handle_start(message):
    chat_id = message.chat.id
    with subscribers_lock:
        if chat_id not in subscribers:
            subscribers.add(chat_id)
            response = "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö!"
            logger.info(f"New subscriber: {chat_id}")
        else:
            response = "‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!"

    bot.reply_to(message, response)


@bot.message_handler(commands=['stop'])
def handle_stop(message):
    chat_id = message.chat.id
    with subscribers_lock:
        if chat_id in subscribers:
            subscribers.remove(chat_id)
            response = "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
            logger.info(f"Unsubscribed: {chat_id}")
        else:
            response = "‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã"

    bot.reply_to(message, response)


@bot.message_handler(commands=['status'])
def handle_status(message):
    chat_id = message.chat.id
    with subscribers_lock:
        status = "–ø–æ–¥–ø–∏—Å–∞–Ω—ã" if chat_id in subscribers else "–Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã"

    bot.reply_to(message, f"üîî –°—Ç–∞—Ç—É—Å: –í—ã {status} –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")


@bot.message_handler(commands=['inventory'])
def handle_inventory(message):
    low_stock = {"–ö–æ—Ñ–µ": 5, "–ú–æ–ª–æ–∫–æ": 3, "–°–∞—Ö–∞—Ä": 2}

    response = "‚ö†Ô∏è –ù–∏–∑–∫–∏–µ –∑–∞–ø–∞—Å—ã:\n"
    response += "\n".join([f"- {product}: {qty} –∫–≥" for product, qty in low_stock.items()])

    bot.reply_to(message, response)


def notify_low_stock(product_name):
    """–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã)"""
    if not active.is_set():
        logger.warning("Bot is shutting down. Notification discarded.")
        return

    notification_queue.put(product_name)
    logger.info(f"Notification queued: {product_name}")


def notification_worker():
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    logger.info("Notification worker started")
    while active.is_set() or not notification_queue.empty():
        try:
            product_name = notification_queue.get(timeout=1.0)

            with subscribers_lock:
                current_subscribers = list(subscribers)

            for chat_id in current_subscribers:
                try:
                    bot.send_message(
                        chat_id,
                        f"üö® –°–†–û–ß–ù–û! –ü—Ä–æ–¥—É–∫—Ç '{product_name}' –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —É—Ä–æ–≤–Ω–µ!"
                    )
                    logger.debug(f"Sent to {chat_id}")
                except telebot.apihelper.ApiTelegramException as e:
                    if e.error_code == 403:
                        with subscribers_lock:
                            if chat_id in subscribers:
                                subscribers.remove(chat_id)
                                logger.warning(f"Removed blocked user: {chat_id}")
                    else:
                        logger.error(f"API error: {e}")
                except Exception as e:
                    logger.exception(f"Unexpected error: {e}")

            notification_queue.task_done()
            logger.debug(f"Processed: {product_name}")

        except Empty:
            continue
        except Exception as e:
            logger.exception(f"Worker error: {e}")
            time.sleep(1)


def run_bot():
    logger.info("Starting bot polling")
    while active.is_set():
        try:
            bot.polling(none_stop=True, timeout=20)
        except Exception as e:
            logger.error(f"Polling error: {e}")
            time.sleep(5)


def shutdown():
    logger.info("Initiating shutdown sequence")
    active.clear()

    notification_queue.join()
    logger.info("All notifications processed. System shutdown")


if __name__ == "__main__":
    try:
        worker_thread = threading.Thread(
            target=notification_worker,
            name="NotificationWorker",
            daemon=True
        )
        worker_thread.start()

        run_bot()

    except KeyboardInterrupt:
        logger.info("Keyboard interrupt received")
        shutdown()
    except Exception as e:
        logger.exception("Fatal error in main")
        shutdown()
    finally:
        logger.info("Application terminated")
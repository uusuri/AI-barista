import pandas as pd

path = "/Users/uusuri/Documents/PycharmProjects/Education/coffee_stock.xlsx"

try:
    df = pd.read_excel(path)
except FileNotFoundError:
    print("‚ùå –§–∞–π–ª —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit()


def split_input(input_str):
    return [item.strip() for item in input_str.split(',') if item.strip()]


def validate_input(item, amount_str, mode="order"):
    try:
        amount = int(amount_str)
        if mode == "order" and amount <= 0:
            print(f"‚ö†Ô∏è –î–ª—è '{item}': –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0!")
            return None
        elif mode == "restock" and amount < 0:
            print(f"‚ö†Ô∏è –î–ª—è '{item}': –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º!")
            return None
    except ValueError:
        print(f"‚ùå –î–ª—è '{item}': –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
        return None
    return amount


def update_stock(item, amount, mode="order"):
    if item not in df["–ù–∞–∑–≤–∞–Ω–∏–µ"].values:
        print(f"‚ùå –û—à–∏–±–∫–∞: '{item}' –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ!")
        return False, 0

    index = df.index[df["–ù–∞–∑–≤–∞–Ω–∏–µ"] == item].tolist()[0]
    current_qty = df.at[index, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]

    if mode == "order":
        if current_qty < amount:
            print(f"‚ö†Ô∏è –î–ª—è '{item}': –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å: {current_qty}")
            return False, 0
        df.at[index, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] -= amount
        cost = df.at[index, "–°—Ç–æ–∏–º–æ—Å—Ç—å"] * amount
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {item} -{amount}. –û—Å—Ç–∞—Ç–æ–∫: {df.at[index, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']}")
        return True, cost
    else:  # restock
        df.at[index, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] = amount
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {item} ‚Üí {amount}")
        return True, 0


def restock_items():
    print("\nüîπ –†–µ–∂–∏–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤:")
    print(df)
    items = split_input(input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: "))
    amounts = split_input(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: "))

    if len(items) != len(amounts):
        print("‚ùå –û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —á–∏—Å–µ–ª!")
        return

    for item, amount_str in zip(items, amounts):
        amount = validate_input(item, amount_str, mode="restock")
        if amount is not None:
            update_stock(item, amount, mode="restock")

    df.to_excel(path, index=False)
    print("\n–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏:")
    print(df)


def process_order():
    print("\nüîπ –¢–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏:")
    print(df)

    user_input = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–ø–∏—Ç–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ '–ü–æ–ø–æ–ª–Ω–∏—Ç—å': ").strip()

    if user_input.lower() == "–ø–æ–ø–æ–ª–Ω–∏—Ç—å":
        restock_items()
        return

    items = split_input(user_input)
    amounts = split_input(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: "))

    if len(items) != len(amounts):
        print("‚ùå –û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–∏—Ç–∫–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —á–∏—Å–µ–ª!")
        return

    total_cost = 0
    for item, amount_str in zip(items, amounts):
        amount = validate_input(item, amount_str, mode="order")
        if amount is not None:
            success, cost = update_stock(item, amount, mode="order")
            if success:
                total_cost += cost

    print(f"\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost}")
    df.to_excel(path, index=False)


def low_stock():
    low_items = {item: qty for item, qty in zip(df["–ù–∞–∑–≤–∞–Ω–∏–µ"], df["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]) if qty <= 3}
    return str(low_items) if low_items else "–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º."


if __name__ == "__main__":
    process_order()
    print("\n–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏:")
    print(df)